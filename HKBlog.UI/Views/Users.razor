@page "/users"
@inject IUserController userController
@inject IProductController productController
@inject IStore store
@implements IDisposable

@if (store.State().ActiveUser.User.Id != "" && store.State().ActiveUser.User.IsAdmin)
{
    <div class="form center-div">
        <h1 class="heading">For Admin <span>Authorization</span>only</h1>
        <input @bind-value="publicKey" class="box" placeholder="enter paystacks public key">
        <input @bind-value="secretKey" class="box" placeholder="enter paystacks secret key">
        <button @onclick="SaveKeys" class="btn">Save</button>
    </div>
}

<section class="users">
    <h1 class="heading">Registered <span>Users</span></h1>
    <div class="table">
        <table>
            <thead>
                <tr>
                    <th>S / N</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Is Admin</th>
                    <th>Image</th>
                    @if (store.State().ActiveUser.User != null && store.State().ActiveUser.User.IsAdmin)
                    {
                        <th>Has Admin Acess</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ int count = 0;
                foreach (var user in users)
                {
                    <tr>
                        <td>@count</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.IsAdmin</td>
                       @if (!string.IsNullOrEmpty(user.Filepath))
                        {
                            <td><img class="table-img" src="@user.Filepath" /></td>
                        }
                        else
                        {
                            <td><img class="table-img" src="@FilePath" /></td>
                        }
                        @if (store.State().ActiveUser.User != null && store.State().ActiveUser.User.IsAdmin)
                        {
                            @if (user.AllowAcess)
                            {
                                <td>
                                    <input type="checkbox" checked />
                                </td>
                            }
                            else
                            {
                                <td>
                                    <input type="checkbox" @onchange="(() => GrantAcess(user))" />
                                </td>
                            }
                        }
                    </tr>
                    count++;
                }
                }
            </tbody>
        </table>

    </div>
</section>

@code{
    private int count = 0;
    List<User> users = new();
    string publicKey = "";
    string secretKey = "";
    public string FilePath { get; set; } = "./img/user-2.png";
    protected async override Task OnInitializedAsync()
    {
        users = await userController.ReadAllUsers();
        store.AddStateChangedListeners(() => { StateHasChanged(); });
    }
    public void Dispose()
    {
        store.RemoveStateChangedListeners(() => { StateHasChanged(); });
    }
    private async void GrantAcess(User user)
    {
        user.AllowAcess = true;
        await userController.AddUser(user);
    }
    private void SaveKeys()
    {
        var dict = new Dictionary<string, string>();
        if (publicKey != "" && secretKey != "")
        {
            dict.Add("public", publicKey);
            dict.Add("secret", secretKey);
            productController.AddPaystackKey(dict);
        }
    }
}
